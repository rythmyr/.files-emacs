#+TITLE: Emacs Config
#+AUTHOR: Rythmyr

* Sensible defaults
Be sure and clone [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] into ~/.emacs.d/lib

=mkdir -p ~/.emacs.d/lib/ && cd ~/.emacs.d/lib/ && git clone https://github.com/hrs/sensible-defaults.el=

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/lib/sensible-defaults.el/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/bind-home-and-end-keys)
  (sensible-defaults/set-default-line-length-to 140)
  (remove-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

I use some of my own custom defaults as well

#+BEGIN_SRC emacs-lisp
  ;; store backups and autosaves in ~/.cache instead of the same dir as the file
  (setq backup-directory-alist
        '((".*" . "~/.cache/emacs/backup/")))
  (setq auto-save-file-name-transforms
        `((".*" "~/.cache/emacs/autosave/" t)))

  ;; create those directories if they don't already exist
  (if (file-directory-p "~/.cache/emacs/backup/") () (make-directory "~/.cache/emacs/backup/" t))
  (if (file-directory-p "~/.cache/emacs/autosave/") () (make-directory "~/.cache/emacs/autosave/" t))

  ;; use a custom file instead of init.el for those pesky packages that add custom variables
  (if (file-exists-p "~/.emacs.d/custom.el") () (write-region "" nil "~/.emacs.d/custom.el" nil 0))
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC
* UI settings
** Theme
use solarized dark theme, don't change fonts for headers

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (setq solarized-use-variable-pitch nil
          solarized-scale-org-headlines nil)
    (load-theme 'solarized-dark t))
#+END_SRC
** Other settings
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
  (setq-default display-line-numbers-width 5)
  (global-display-line-numbers-mode 1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq-default global-visual-line-mode t)
#+END_SRC
* Evil
** evil leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    :config
    (evil-leader/set-leader "<SPC>")
    (global-evil-leader-mode)
  )
#+END_SRC
** base evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :after (evil-leader)
    :config
    (evil-mode t)
  )
#+END_SRC
** evil collection
useful for things like ibuffer, which do not have evil keys by default

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :ensure t
    :after (evil))
#+END_SRC
* Org mode
** General Config
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :commands
    (org-store-link
     org-agenda
     org-capture)
    :hook
    (org-mode . org-indent-mode)
    (org-mode . visual-line-mode)
    :config
    (setq org-directory "~/data/org/"
          org-default-notes-file (concat org-directory "notes.org")
          org-cycle-separator-lines 1
          org-M-RET-may-split-line nil
          org-habit-graph-column 40
          org-habit-show-all-today t
          org-habit-preceding-days 35
          org-habit-following-days 3)
    (add-to-list 'org-modules 'org-habit)
    )

  (use-package evil-org
    :ensure t
    :after (evil org)
    :hook
    (org-mode . evil-org-mode)
    :config
    (setq evil-org-retain-visual-state-on-shift t))
#+END_SRC
** Global org keybinds
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "ol" 'org-store-link
                       "oa" 'org-agenda
                       "oc" 'org-capture)
#+END_SRC
** Agenda config
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/data/org")
        org-agenda-start-day "-1d"
        org-agenda-start-on-weekday nil
        org-agenda-todo-ignore-scheduled t)
  (add-hook 'org-agenda-mode-hook 'ryth/disable-line-numbers)
#+END_SRC
** Capture Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ;; General tasks - things I think of, just TODO and DONE are the states
          ("t"
           "Task"
           entry
           (file+olp "~/data/org/todo.org" "Inbox")
           "* TODO %?
  :LOGBOOK:
  - State \"TODO\"       from \"\"           %U
  :END:
  ")
          ;; Mini retrospective of what I did yesterday and what I plan to do today, if I'm stuck on anything
          ("d"
           "Dailies"
           plain
           (file+datetree "~/data/org/dailies.org")
           "1) Yesterday: %^{Yesterday}
  2) Today: %^{Today}
  3) Roadblocks: %^{Roadblocks}"
           :tree-type week)
          ;; Add something to the calendar. Will show up in the agenda
          ("e"
           "Appointment"
           entry
           (file+olp "~/data/org/events.org" "Events")
           "* %^{Event} - %^{Location}
  %^{Time}T")
          ("r"
           "Reminder"
           entry
           (file+olp "~/data/org/events.org" "Reminders")
           "* TODO %^{Reminder}
  SCHEDULED: %^{Time}T")
          ("j"
           "Journal"
           entry
           (file+datetree "~/data/org/journal.org")
           "* %<%F %R> %^g
  :PROPERTIES:
  :RATING: %^{1-5}
  :END:
  %?"
          :tree-type week)
          ;; Tasks I need to do for work, with linked work items.
          ;; These tasks follow a TODO sequence: TASK STARTED MR | VERIFY DEMO RESOLVED
          ;; NOTE: this requires a #+LINK task <url> to be set up in the todo.org buffer for the link to work properly
          ("w"
           "Work"
           entry
           (file+headline "~/data/org/todo.org" "Work")
           "* TASK [[task:%^{Task ID}]] %?
  :LOGBOOK:
  - State \"TASK\"       from \"\"           %U
  :END:
  ")
          ;; Keeping track of when I'm working and when I'm not
          ("i" "Clock In")
          ("o" "Clock Out")
          ("iw"
           "Work"
           entry
           (file+olp+datetree "~/data/org/times.org")
           "* IN  WORK %<%F %R>"
           :immediate-finish t
           :tree-type week)
          ("ow"
           "Work"
           entry
           (file+olp+datetree "~/data/org/times.org")
           "* OUT WORK %<%F %R>"
           :immediate-finish t
           :tree-type week)
          ("il"
           "Lunch"
           entry
           (file+olp+datetree "~/data/org/times.org")
           "* IN  LUNCH %<%F %R>"
           :immediate-finish t
           :tree-type week)
          ("ol"
           "Lunch"
           entry
           (file+olp+datetree "~/data/org/times.org")
           "* OUT LUNCH %<%F %R>"
           :immediate-finish t
           :tree-type week)
          ("im"
           "Meeting"
           entry
           (file+olp+datetree "~/data/org/times.org")
           "* IN  MEETING %<%F %R>"
           :immediate-finish t
           :tree-type week)
          ("om"
           "Meeting"
           entry
           (file+olp+datetree "~/data/org/times.org")
           "* OUT MEETING %<%F %R>"
           :immediate-finish t
           :tree-type week)
          ))
#+END_SRC
** Refile Targets
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 2))
        org-refile-use-outline-path 'file
        org-refile-allow-creating-parent-nodes 'confirm
        org-outline-path-complete-in-steps nil)
#+END_SRC
* Programming
** Overall
*** editorconfig
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+END_SRC
*** company, for completions
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind (:map company-active-map
     ("C-n" . company-select-next-or-abort)
     ("C-p" . company-select-previous-or-abort))
    :config
    (setq company-idle-delay .05))
#+END_SRC
*** projectile, for keeping projects separate
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (evil-leader/set-key "p" 'projectile-command-map)
    )
#+END_SRC
*** magit, for git integration
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands
    (magit-status
     magit-blame)
    :init
    (evil-leader/set-key "gs" 'magit-status)
    (evil-leader/set-key "gb" 'magit-blame)
  )
  (use-package evil-magit
    :ensure t
    :after (evil magit))
#+END_SRC
** Unity 3d (C Sharp)
#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :ensure t
    :hook ((csharp-mode . omnisharp-mode)
           (csharp-mode . flycheck-mode)
           (csharp-mode . company-mode))
    :config
    (add-to-list 'company-backends 'company-omnisharp)
    (evil-leader/set-key-for-mode 'csharp-mode "ld" 'omnisharp-go-to-definition
                                                  "lu" 'omnisharp-find-usages
                                                  "lf" 'omnisharp-fix-code-issue-at-point
                                                  "lr" 'omnisharp-rename))
#+END_SRC
** Typescript
#+BEGIN_SRC emacs-lisp
  (use-package tide
    :ensure t
    :commands tide-setup
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (typescript-mode . flycheck-mode)
           (typescript-mode . eldoc-mode)
           (typescript-mode . company-mode)
           )
    :config
    (setq tide-tsserver-executable "node_modules/typescript/bin/tsserver")
    (evil-leader/set-key-for-mode 'typescript-mode "ld" 'tide-jump-to-definition
                                                   "lu" 'tide-references
                                                   "lr" 'tide-rename-symbol
                                                   "lf" 'tide-fix
                                                   "lo" 'tide-organize-imports
                                                   "le" 'tide-error-at-point))
#+END_SRC
* My functions/keybinds
** Edit files
*** config
#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (evil-leader/set-key "ec" 'ryth/edit-config)
  (defun ryth/edit-local-config ()
    (interactive)
    (find-file "~/.emacs.d/local.org"))
  (evil-leader/set-key "elc" 'ryth/edit-local-config)
#+END_SRC
*** todos
#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-todos ()
    (interactive)
    (find-file "~/data/org/todo.org"))
  (evil-leader/set-key "et" 'ryth/edit-todos)
#+END_SRC
*** inbox
#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-inbox ()
    (interactive)
    (find-file "/keybase/private/rythmyr/org/todo.org"))
  (evil-leader/set-key "ei" 'ryth/edit-inbox)
  (defun ryth/edit-local-inbox ()
    (interactive)
    (find-file "/keybase/private/rythmyr/org/todo.org"))
  (evil-leader/set-key "eli" 'ryth/edit-local-inbox)
#+END_SRC
*** notes
#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-notes ()
    (interactive)
    (find-file "~/data/org/notes.org"))
  (evil-leader/set-key "en" 'ryth/edit-notes)
#+END_SRC
*** journal
#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-journal ()
    (interactive)
    (find-file "/keybase/private/rythmyr/org/life.org"))
  (evil-leader/set-key "ej" 'ryth/edit-journal)
#+END_SRC
*** dailies
#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-dailies()
    (interactive)
    (find-file "~/data/org/dailies.org"))
  (evil-leader/set-key "ed" 'ryth/edit-dailies)
#+END_SRC
*** hours
#+BEGIN_SRC emacs-lisp
  (defun ryth/edit-hours()
    (interactive)
    (find-file "~/data/org/times.org"))
  (evil-leader/set-key "eh" 'ryth/edit-hours)
#+END_SRC
** Reload config
#+BEGIN_SRC emacs-lisp
  (defun ryth/reload-config ()
    (interactive)
    (load user-init-file))
  (evil-leader/set-key "cr" 'ryth/reload-config)
#+END_SRC
** Mode shortcuts
*** line numbers
#+BEGIN_SRC emacs-lisp
  (defun ryth/disable-line-numbers ()
    (interactive)
    (display-line-numbers-mode -1))
#+END_SRC
* Misc
** ido
for better buffer/file switching (C-x b and C-x C-f)

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (evil-leader/set-key "gf" 'ido-find-file)
  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
  (use-package ido-completing-read+
    :ensure t
    :config
    (ido-ubiquitous-mode 1))
#+END_SRC
** ibuffer
for a better buffer list

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :after (evil-collection)
    :config
    (evil-ex-define-cmd "ls" 'ibuffer)
    (evil-collection-ibuffer-setup)
    (setq ibuffer-formats
          '((mark modified read-only locked " "
                  (name 32 32 :left :elide)
                  " "
                  (size 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " " filename-and-process)
            (mark " "
                  (name 16 -1)
                  " " filename))))
#+END_SRC
